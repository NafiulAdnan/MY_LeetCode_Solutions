class Solution {
private:

    vector<char>charAtNum[10];  /// the buttons
    vector<string>res_string;    /// final results
    //map<string, bool> mp;  /// checking if Iâ€™ve


    void insert(int id, string s)  /// insert chars at charAtNum[id]
    {
        for(int i=0; i<s.size(); i++)
        {
            charAtNum[id].push_back(s[i]);
        }
        return;

    }
    void init()  /// intial the vector
    {
        insert(2, "abc");
        insert(3,"def");
        insert(4,"ghi");
        insert(5,"jkl");
        insert(6,"mno");
        insert(7,"pqrs");
        insert(8,"tuv");
        insert(9,"wxyz");
    }
    void res_insert(string s)     /// inserting the combination
    {
        //if(!mp[s])   // No need I guess
        {
            res_string.push_back(s);
        }
        return;
    }





    void combined(int id, string s,string digits)     /// finding combination using recursion
    {
        if(id == digits.size() )
        {
            if(s.size()){
            res_insert(s);
            }
            return;
        }
        int  node = digits[id] - '0';
        for(int i = 0; i< charAtNum[node].size() ; i++)
        {
            combined(id+1, s+charAtNum[node][i], digits);
        }
    }

    
public:
    
    vector<string> letterCombinations(string digits)    {
        init();
        combined(0,"", digits);
        return res_string;
        
    }
};
